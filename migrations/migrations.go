// Code generated by go-bindata.
// sources:
// migrations/0001-CreateUserTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreateusertableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8e\xcd\x6e\x13\x31\x14\x85\xf7\x7e\x8a\xa3\xae\x12\x09\xc7\x50\xa9\x2c\x52\x84\x08\xad\x03\x16\x93\x09\x4a\x3c\x6a\xcb\x06\x39\x9e\xdb\x19\xab\x9d\xd8\xf2\x0f\x11\x8f\xc4\x6b\xf0\x64\x68\x9a\x90\x6d\x97\xf7\x9e\xef\x3b\x3a\x9c\xe3\xa9\xec\xc8\xfa\x04\x13\x1c\xe3\x1c\x7d\xce\x21\xcd\x85\xe8\x5c\xee\xcb\x6e\x66\xfd\x20\xb2\x0f\x8f\x91\xa8\x33\x03\x25\x71\xc2\x19\xe7\x23\x5d\x39\x4b\xfb\x44\x2d\xca\xbe\xa5\x88\xdc\x13\x56\x4a\xe3\xf9\xf8\x9e\xff\x2f\x9c\x0b\x71\x38\x1c\x66\x3e\xd0\x3e\xf9\x12\x2d\xcd\x7c\xec\xc4\x89\x4a\x62\x70\x99\x9f\x8e\xd1\xb8\xf1\xe1\x77\x74\x5d\x9f\xf1\xf7\x0f\x2e\xdf\xbe\x7b\x0f\xed\x03\x96\x91\x08\x5f\xc6\x0d\xf8\xb0\x33\xf6\x89\xf6\xed\xa7\xfc\xd8\x59\x3f\x6e\xfc\xc8\xd8\xcd\x46\x2e\xb4\x84\xbc\xd7\xb2\xde\xaa\x75\x0d\xb5\x44\xbd\xd6\x90\xf7\x6a\xab\xb7\xb8\x28\xc5\xb5\xdc\xa7\x14\x2e\xae\xcf\xb0\x5e\x7c\xae\x24\x4a\xa2\x98\x30\x61\x00\xe0\x5a\x34\x8d\xba\xc5\xf7\x8d\x5a\x2d\x36\x0f\xf8\x26\x1f\xde\xbc\x04\x34\x18\xf7\x8c\x5f\x26\xda\xde\xc4\xc9\xe5\xd5\xd5\xf4\xa5\xbd\x6e\xaa\xea\x08\xd8\x48\x26\x53\xfb\xd3\x64\x64\x37\x50\xca\x66\x08\xb8\x53\xfa\x2b\xb4\x5a\x49\xfc\x58\xd7\xf2\x6c\xe0\x56\x2e\x17\x4d\xa5\x51\xaf\xef\x26\xd3\xa3\x5f\x42\xfb\xba\xdf\x54\x15\x9b\x5e\x33\xf6\x2f\x00\x00\xff\xff\x3d\x2e\x6a\xa5\xb8\x01\x00\x00")

func migrations0001CreateusertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreateusertableSql,
		"migrations/0001-CreateUserTable.sql",
	)
}

func migrations0001CreateusertableSql() (*asset, error) {
	bytes, err := migrations0001CreateusertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateUserTable.sql", size: 440, mode: os.FileMode(420), modTime: time.Unix(1490620945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateUserTable.sql": migrations0001CreateusertableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateUserTable.sql": &bintree{migrations0001CreateusertableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

